.m file : /home/rupesh/blinkybot/bbsim/meld-programs/rainbow_newC.m
.md file : def.md
.ml file : file2.ml
rule : 0
init -o axioms
_init
Not persistent
RULE 0
ITERATE OVER _init (d) MATCHING
  RULE DONE
  MOVE tuple TO reg 0
  REMOVE reg 0
  MOVE PTR 0 TO reg 0
  RETURN DERIVED
  NEXT
RETURN
Rule depends on : 
_init

rule : 1
!topNeighbor(X1) -o !___robhgieNpot(host-id)@X1.
topNeighbor
Is persistent
RULE 1
ITERATE OVER topNeighbor () MATCHING
  MOVE tuple TO reg 0
  RULE DONE
  ALLOC ___robhgieNpot TO reg 1
  MOVE host TO 1.0
  MOVE 0.0 TO reg 2
  SEND reg 1 TO reg 2
  RETURN DERIVED
  NEXT
RETURN
Rule depends on : 
___robhgieNpot
topNeighbor

rule : 2
!bottomNeighbor(X1) -o !___robhgieNmottob(host-id)@X1.
bottomNeighbor
Is persistent
RULE 2
ITERATE OVER bottomNeighbor () MATCHING
  MOVE tuple TO reg 0
  RULE DONE
  ALLOC ___robhgieNmottob TO reg 1
  MOVE host TO 1.0
  MOVE 0.0 TO reg 2
  SEND reg 1 TO reg 2
  RETURN DERIVED
  NEXT
RETURN
Rule depends on : 
___robhgieNmottob
bottomNeighbor

rule : 3
!sideNeighbor(X1) -o !___robhgieNedis(host-id)@X1.
sideNeighbor
Is persistent
RULE 3
ITERATE OVER sideNeighbor () MATCHING
  MOVE tuple TO reg 0
  RULE DONE
  ALLOC ___robhgieNedis TO reg 1
  MOVE host TO 1.0
  MOVE 0.0 TO reg 2
  SEND reg 1 TO reg 2
  RETURN DERIVED
  NEXT
RETURN
Rule depends on : 
___robhgieNedis
sideNeighbor

rule : 4
!neighbor(X, MV1), MV1 = 5 -o !bottomNeighbor(X).
neighbor
Is persistent
RULE 4
ITERATE OVER neighbor () MATCHING
  MOVE tuple TO reg 0
  OP 0.1 INT EQUAL INT 5 TO reg 1
  IF (reg 1) THEN
    RULE DONE
    ALLOC bottomNeighbor TO reg 1
    MOVE 0.0 TO 1.0
    SEND reg 1 TO reg 1
    RETURN DERIVED
  ENDIF
  NEXT
RETURN
Rule depends on : 
bottomNeighbor
neighbor

rule : 5
!vacant(MV2), MV2 = 5 -o !noBottomNeighbor().
vacant
Is persistent
RULE 5
ITERATE OVER vacant () MATCHING
  MOVE tuple TO reg 0
  OP 0.0 INT EQUAL INT 5 TO reg 1
  IF (reg 1) THEN
    RULE DONE
    ALLOC noBottomNeighbor TO reg 1
    SEND reg 1 TO reg 1
    RETURN DERIVED
  ENDIF
  NEXT
RETURN
Rule depends on : 
noBottomNeighbor
vacant

rule : 6
!neighbor(X, MV3), MV3 = 0 -o !topNeighbor(X).
neighbor
Is persistent
RULE 6
ITERATE OVER neighbor () MATCHING
  MOVE tuple TO reg 0
  OP 0.1 INT EQUAL INT 0 TO reg 1
  IF (reg 1) THEN
    RULE DONE
    ALLOC topNeighbor TO reg 1
    MOVE 0.0 TO 1.0
    SEND reg 1 TO reg 1
    RETURN DERIVED
  ENDIF
  NEXT
RETURN
Rule depends on : 
neighbor
topNeighbor

rule : 7
!neighbor(X, P), P != 0, P != 5 -o !sideNeighbor(X).
neighbor
Is persistent
RULE 7
ITERATE OVER neighbor () MATCHING
  MOVE tuple TO reg 0
  OP 0.1 INT NOT EQUAL INT 0 TO reg 1
  IF (reg 1) THEN
    OP 0.1 INT NOT EQUAL INT 5 TO reg 1
    IF (reg 1) THEN
      RULE DONE
      ALLOC sideNeighbor TO reg 1
      MOVE 0.0 TO 1.0
      SEND reg 1 TO reg 1
      RETURN DERIVED
    ENDIF
  ENDIF
  NEXT
RETURN
Rule depends on : 
neighbor
sideNeighbor

rule : 8
!noBottomNeighbor() -o !level(0).
noBottomNeighbor
Is persistent
RULE 8
ITERATE OVER noBottomNeighbor () MATCHING
  MOVE tuple TO reg 0
  RULE DONE
  ALLOC level TO reg 1
  MOVE INT 0 TO 1.0
  SEND reg 1 TO reg 1
  RETURN DERIVED
  NEXT
RETURN
Rule depends on : 
level
noBottomNeighbor

rule : 9
!___robhgieNedis(N), !level(H) -o !level(H)@N.
level
___robhgieNedis
Is persistent
RULE 9
ITERATE OVER ___robhgieNedis () MATCHING
  MOVE tuple TO reg 0
  ITERATE OVER level () MATCHING
    MOVE tuple TO reg 1
    RULE DONE
    ALLOC level TO reg 2
    MOVE 1.0 TO 2.0
    MOVE 0.0 TO reg 3
    SEND reg 2 TO reg 3
    RETURN DERIVED
    NEXT
  NEXT
RETURN
Rule depends on : 
___robhgieNedis
level

rule : 10
!___robhgieNmottob(N), !level(BH) -o !level(BH + 1)@N.
level
___robhgieNmottob
Is persistent
RULE 10
ITERATE OVER ___robhgieNmottob () MATCHING
  MOVE tuple TO reg 0
  ITERATE OVER level () MATCHING
    MOVE tuple TO reg 1
    RULE DONE
    ALLOC level TO reg 2
    OP 1.0 INT PLUS INT 1 TO 2.0
    MOVE 0.0 TO reg 3
    SEND reg 2 TO reg 3
    RETURN DERIVED
    NEXT
  NEXT
RETURN
Rule depends on : 
___robhgieNmottob
level

rule : 11
!___robhgieNpot(N), !level(TH) -o !level(TH - 1)@N.
level
___robhgieNpot
Is persistent
RULE 11
ITERATE OVER ___robhgieNpot () MATCHING
  MOVE tuple TO reg 0
  ITERATE OVER level () MATCHING
    MOVE tuple TO reg 1
    RULE DONE
    ALLOC level TO reg 2
    OP 1.0 INT MINUS INT 1 TO 2.0
    MOVE 0.0 TO reg 3
    SEND reg 2 TO reg 3
    RETURN DERIVED
    NEXT
  NEXT
RETURN
Rule depends on : 
___robhgieNpot
level

rule : 12
!level(Color) -o !setColor2(Color % 9).
level
Is persistent
RULE 12
ITERATE OVER level () MATCHING
  MOVE tuple TO reg 0
  RULE DONE
  ALLOC setColor2 TO reg 1
  OP 0.0 INT MOD INT 9 TO 1.0
  SEND reg 1 TO reg 1
  RETURN DERIVED
  NEXT
RETURN
Rule depends on : 
level
setColor2

predicate : 0
_init
affected rule : 0
PROCESS _init (1):
RETURN LINEAR
END PROCESS;
Predicate depends on : 

predicate : 1
set-priority
PROCESS set-priority (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 2
setcolor
PROCESS setcolor (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 3
setedgelabel
PROCESS setedgelabel (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 4
write-string
PROCESS write-string (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 5
add-priority
PROCESS add-priority (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 6
schedule-next
PROCESS schedule-next (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 7
setColor2
PROCESS setColor2 (1):
RETURN
END PROCESS;
Predicate depends on : 

predicate : 8
neighbor
affected rule : 4
affected rule : 6
affected rule : 7
PROCESS neighbor (135):
RULE 4
MOVE tuple TO reg 0
OP 0.1 INT EQUAL INT 5 TO reg 1
IF (reg 1) THEN
  RULE DONE
  ALLOC bottomNeighbor TO reg 1
  MOVE 0.0 TO 1.0
  SEND reg 1 TO reg 1
ENDIF
RULE 6
MOVE tuple TO reg 0
OP 0.1 INT EQUAL INT 0 TO reg 1
IF (reg 1) THEN
  RULE DONE
  ALLOC topNeighbor TO reg 1
  MOVE 0.0 TO 1.0
  SEND reg 1 TO reg 1
ENDIF
RULE 7
MOVE tuple TO reg 0
OP 0.1 INT NOT EQUAL INT 0 TO reg 1
IF (reg 1) THEN
  OP 0.1 INT NOT EQUAL INT 5 TO reg 1
  IF (reg 1) THEN
    RULE DONE
    ALLOC sideNeighbor TO reg 1
    MOVE 0.0 TO 1.0
    SEND reg 1 TO reg 1
  ENDIF
ENDIF
RETURN
END PROCESS;
Predicate depends on : 
bottomNeighbor
sideNeighbor
topNeighbor

predicate : 9
level
affected rule : 9
affected rule : 10
affected rule : 11
affected rule : 12
PROCESS level (167):
RULE 9
MOVE tuple TO reg 0
ITERATE OVER ___robhgieNedis () MATCHING
  MOVE tuple TO reg 1
  RULE DONE
  ALLOC level TO reg 2
  MOVE 0.0 TO 2.0
  MOVE 1.0 TO reg 3
  SEND reg 2 TO reg 3
  RETURN DERIVED
  NEXT
RULE 10
MOVE tuple TO reg 0
ITERATE OVER ___robhgieNmottob () MATCHING
  MOVE tuple TO reg 1
  RULE DONE
  ALLOC level TO reg 2
  OP 0.0 INT PLUS INT 1 TO 2.0
  MOVE 1.0 TO reg 3
  SEND reg 2 TO reg 3
  RETURN DERIVED
  NEXT
RULE 11
MOVE tuple TO reg 0
ITERATE OVER ___robhgieNpot () MATCHING
  MOVE tuple TO reg 1
  RULE DONE
  ALLOC level TO reg 2
  OP 0.0 INT MINUS INT 1 TO 2.0
  MOVE 1.0 TO reg 3
  SEND reg 2 TO reg 3
  RETURN DERIVED
  NEXT
RULE 12
MOVE tuple TO reg 0
RULE DONE
ALLOC setColor2 TO reg 1
OP 0.0 INT MOD INT 9 TO 1.0
SEND reg 1 TO reg 1
RETURN
END PROCESS;
Predicate depends on : 
___robhgieNedis
___robhgieNmottob
___robhgieNpot
level
setColor2

predicate : 10
bottomNeighbor
affected rule : 2
PROCESS bottomNeighbor (26):
RULE 2
MOVE tuple TO reg 0
RULE DONE
ALLOC ___robhgieNmottob TO reg 1
MOVE host TO 1.0
MOVE 0.0 TO reg 2
SEND reg 1 TO reg 2
RETURN
END PROCESS;
Predicate depends on : 
___robhgieNmottob

predicate : 11
noBottomNeighbor
affected rule : 8
PROCESS noBottomNeighbor (22):
RULE 8
RULE DONE
ALLOC level TO reg 0
MOVE INT 0 TO 0.0
SEND reg 0 TO reg 0
RETURN
END PROCESS;
Predicate depends on : 
level

predicate : 12
topNeighbor
affected rule : 1
PROCESS topNeighbor (26):
RULE 1
MOVE tuple TO reg 0
RULE DONE
ALLOC ___robhgieNpot TO reg 1
MOVE host TO 1.0
MOVE 0.0 TO reg 2
SEND reg 1 TO reg 2
RETURN
END PROCESS;
Predicate depends on : 
___robhgieNpot

predicate : 13
sideNeighbor
affected rule : 3
PROCESS sideNeighbor (26):
RULE 3
MOVE tuple TO reg 0
RULE DONE
ALLOC ___robhgieNedis TO reg 1
MOVE host TO 1.0
MOVE 0.0 TO reg 2
SEND reg 1 TO reg 2
RETURN
END PROCESS;
Predicate depends on : 
___robhgieNedis

predicate : 14
vacant
affected rule : 5
PROCESS vacant (33):
RULE 5
MOVE tuple TO reg 0
OP 0.0 INT EQUAL INT 5 TO reg 1
IF (reg 1) THEN
  RULE DONE
  ALLOC noBottomNeighbor TO reg 1
  SEND reg 1 TO reg 1
ENDIF
RETURN
END PROCESS;
Predicate depends on : 
noBottomNeighbor

predicate : 15
___robhgieNedis
affected rule : 9
PROCESS ___robhgieNedis (43):
RULE 9
MOVE tuple TO reg 0
ITERATE OVER level () MATCHING
  MOVE tuple TO reg 1
  RULE DONE
  ALLOC level TO reg 2
  MOVE 1.0 TO 2.0
  MOVE 0.0 TO reg 3
  SEND reg 2 TO reg 3
  RETURN DERIVED
  NEXT
RETURN
END PROCESS;
Predicate depends on : 
level

predicate : 16
___robhgieNmottob
affected rule : 10
PROCESS ___robhgieNmottob (49):
RULE 10
MOVE tuple TO reg 0
ITERATE OVER level () MATCHING
  MOVE tuple TO reg 1
  RULE DONE
  ALLOC level TO reg 2
  OP 1.0 INT PLUS INT 1 TO 2.0
  MOVE 0.0 TO reg 3
  SEND reg 2 TO reg 3
  RETURN DERIVED
  NEXT
RETURN
END PROCESS;
Predicate depends on : 
level

predicate : 17
___robhgieNpot
affected rule : 11
PROCESS ___robhgieNpot (49):
RULE 11
MOVE tuple TO reg 0
ITERATE OVER level () MATCHING
  MOVE tuple TO reg 1
  RULE DONE
  ALLOC level TO reg 2
  OP 1.0 INT MINUS INT 1 TO 2.0
  MOVE 0.0 TO reg 3
  SEND reg 2 TO reg 3
  RETURN DERIVED
  NEXT
RETURN
END PROCESS;
Predicate depends on : 
level

Import Files...
