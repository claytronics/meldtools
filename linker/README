Compiling external function libraries

* define your external function definition in dummy.cpp
* Make use of extern "C" statement while defining functions in shared library files
 (name mangling in C++)
* g++ -c -fPIC dummy.cpp -o dummy.o
* g++ dummy.o -shared -o dummy.so
* g++ main.cpp -ldl -o test_hello (if main.cpp makes use of external lib
  functions , use "ldl" flag while compiling)

* copy the .so file in /usr/lib

Using external function libraries
extern <type> <function_name>(<arg>,..).

example :
extern int intb(int).

Linking external function libraries
./linker [.m file] [.md file] [.ml file]


[1] .m file : file generated by meld compiler
if you need help for the compiler go here https://docs.google.com/document/d/1GB1TPUaHyw8cWZT3a36Tly5UTxB3L2RpiZ-Ll1WnX8s/edit?usp=sharing

[2] .md file : contains shared library and function signature in following format 

<function_name> <signature> <shared library name>
example :
intb int(int) dummy.so

[3] .ml file : output file generated which will be fed to the VM

this file can be used with visibleSim, if you don't have visibleSim download and install it with the help of the docs above.
Install it properly and then modify config.xml, set the programPath (.ml or .m) and the vmPath.


http://www.isotton.com/devel/docs/C++-dlopen-mini-HOWTO/C++-dlopen-mini-HOWTO.html
http://blog.jeffscudder.com/2008/04/creating-and-using-so-files-with-gcc.html
